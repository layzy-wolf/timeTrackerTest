// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Заула Никита",
            "url": "https://hh.ru/resume/2859ad12ff0d463d060039ed1f7a4352466859",
            "email": "nikita.zatula@mail.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/people": {
            "get": {
                "description": "returns all users, allows filters and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "get users",
                "parameters": [
                    {
                        "description": "filter, page",
                        "name": "Page",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.PeopleReadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "users, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.PeopleReadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "update user by his id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "update user",
                "parameters": [
                    {
                        "description": "id, update",
                        "name": "Update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.PeopleUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.BoolResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "get passport serie and number and add it to db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "PassportNumber",
                        "name": "passportNumber",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.PeopleCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.PeopleCreateResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "delete user by his id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "delete user",
                "parameters": [
                    {
                        "description": "id",
                        "name": "Id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.PeopleUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.BoolResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/task": {
            "get": {
                "description": "get tasks between dates and orders by their interval",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "get tasks",
                "parameters": [
                    {
                        "description": "get request",
                        "name": "Params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.TaskGetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.TaskGetResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/task/end": {
            "post": {
                "description": "finish task by task id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Finish task",
                "parameters": [
                    {
                        "description": "task_id",
                        "name": "Json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.TaskFinishRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.BoolResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/task/start": {
            "post": {
                "description": "begin task by user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Begin task",
                "parameters": [
                    {
                        "description": "user_id, task title",
                        "name": "Json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.TaskBeginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id, error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.TaskBeginResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "endpoints.BoolResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "endpoints.People": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passportNumber": {
                    "type": "string"
                },
                "passportSerie": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "endpoints.PeopleCreateRequest": {
            "type": "object",
            "properties": {
                "passportNumber": {
                    "type": "string"
                }
            }
        },
        "endpoints.PeopleCreateResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "people": {
                    "type": "integer"
                }
            }
        },
        "endpoints.PeopleReadRequest": {
            "type": "object",
            "properties": {
                "filter": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "endpoints.PeopleReadResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "people": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/endpoints.People"
                    }
                }
            }
        },
        "endpoints.PeopleUpdateRequest": {
            "type": "object",
            "properties": {
                "people": {
                    "type": "integer"
                },
                "update": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "endpoints.Task": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "people_id": {
                    "type": "integer"
                },
                "task_end": {
                    "type": "string"
                },
                "task_interval": {
                    "type": "string"
                },
                "task_start": {
                    "type": "string"
                }
            }
        },
        "endpoints.TaskBeginRequest": {
            "type": "object",
            "properties": {
                "people": {
                    "type": "integer"
                },
                "task": {
                    "type": "string"
                }
            }
        },
        "endpoints.TaskBeginResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "task": {
                    "type": "integer"
                }
            }
        },
        "endpoints.TaskFinishRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "integer"
                }
            }
        },
        "endpoints.TaskGetRequest": {
            "type": "object",
            "properties": {
                "people": {
                    "type": "integer"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                }
            }
        },
        "endpoints.TaskGetResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/endpoints.Task"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Тестовое задание Effective Mobile",
	Description:      "Сервис тайм-трекер",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
